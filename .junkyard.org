* Half started ideas
** Org Agenda
Bind org agenda to shortcut and give it our todo paths. Note that the paths are not recursive for org-agenda-files.
#+BEGIN_SRC emacs-lisp  :tangle ~/.emacs
  (define-key global-map "\C-ca" 'org-agenda)

  (setq org-agenda-files (list "~/org/work/softwareadvice"
			       "~/org/personal"))

  ;; ;; Exclude certain directories/files
  (eval-when-compile (require 'cl))
  (setq org-agenda-files
	(remove-if '(lambda (x)
		      (string-match
		       (concat "^" (regexp-quote (expand-file-name "~/org/work/softwareadvice/org-jira/")))
		       x))
		   org-agenda-files))
#+END_SRC

Setup the default view for org agenda
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (custom-set-variables
   '(org-agenda-custom-commands
     (quote
      (("n" "Agenda and all TODOs"
	((agenda ""
		 ((org-agenda-span
		   (quote day))))
	 (alltodo "" nil))
	nil)))))
#+END_SRC

Super simple reordering from Org Agenda -> Todo view
#+BEGIN_SRC emacs-lisp  :tangle ~/.emacs

  ;; The following was lifted from http://pragmaticemacs.com/emacs/reorder-todo-items-in-your-org-mode-agenda/
  (defun jrm/org-headline-to-top ()
    "Move the current org headline to the top of its section"
    (interactive)
    ;; check if we are at the top level
    (let ((lvl (org-current-level)))
      (cond
       ;; above all headlines so nothing to do
       ((not lvl)
	(message "No headline to move"))
       ((= lvl 1)
	;; if at top level move current tree to go above first headline
	(org-cut-subtree)
	(beginning-of-buffer)
	;; test if point is now at the first headline and if not then
	;; move to the first headline
	(unless (looking-at-p "*")
	  (org-next-visible-heading 1))
	(org-paste-subtree))
       ((> lvl 1)
	;; if not at top level then get position of headline level above
	;; current section and refile to that position. Inspired by
	;; https://gist.github.com/alphapapa/2cd1f1fc6accff01fec06946844ef5a5
	(let* ((org-reverse-note-order t)
	       (pos (save-excursion
		      (outline-up-heading 1)
		      (point)))
	       (filename (buffer-file-name))
	       (rfloc (list nil filename nil pos)))
	  (org-refile nil nil rfloc))))))

  (defun jrm/org-agenda-item-to-top ()
    "Move the current agenda item to the top of the subtree in its file"
    (interactive)
    ;; save buffers to preserve agenda
    (org-save-all-org-buffers)
    ;; switch to buffer for current agenda item
    (org-agenda-switch-to)
    ;; move item to top
    (jrm/org-headline-to-top)
    ;; go back to agenda view
    (switch-to-buffer (other-buffer (current-buffer) 1))
    ;; refresh agenda
    (org-agenda-redo)
    )

  ;; (define-key org-agenda-mode-map (kbd "1") 'jrm/org-agenda-item-to-top)
#+END_SRC

Setup reminders with [[http://sachachua.com/blog/2007/11/setting-up-appointment-reminders-in-org/][org-agenda-to-appt]].
#+BEGIN_SRC emacs-lisp  ~/.emacs
  (defun org-agenda-to-appt ()
    "Activate appointments found in `org-agenda-files'."
    (interactive)
    (require 'org)
    (let* ((today (org-date-to-gregorian
           (time-to-days (current-time))))
       (files org-agenda-files) entries file)
      (while (setq file (pop files))
        (setq entries (append entries (org-agenda-get-day-entries
                       file today :timestamp))))
      (setq entries (delq nil entries))
      (mapc (lambda(x)
          (let* ((event (org-trim (get-text-property 1 'txt x)))
             (time-of-day (get-text-property 1 'time-of-day x)) tod)
            (when time-of-day
          (setq tod (number-to-string time-of-day)
                tod (when (string-match
                    "\\([0-9]\\{1,2\\}\\)\\([0-9]\\{2\\}\\)" tod)
                   (concat (match-string 1 tod) ":"
                       (match-string 2 tod))))
          (if tod (appt-add tod event))))) entries)))

  (org-agenda-to-appt)
#+END_SRC

** Org Presentations
*** Reveal JS
#+BEGIN_SRC emacs-lisp  ~/.emacs
  (use-package htmlize)
  (add-to-list 'load-path "~/.emacs.d/lisp/org-reveal")
  (require 'ox-reveal)
#+END_SRC




** Update Custom Org workflow
Lifted from [[http://cachestocaches.com/2016/9/my-workflow-org-agenda/]]. Need to customize to my preferences.
#+BEGIN_SRC emacs-lisp  :tangle ~/.emacs
  ;; (setq org-todo-keywords '((type "TODO" "NEXT" "DONE" "WITING" "INACTIVE" "CANCELLED" "MEETING"))

  ;; == Tags ==
  (setq org-tag-alist '((:startgroup)
		("@errand" . ?r)
		("personal" . ?L)
		(:endgroup)
		("admin" . ?a)
		("sa" . ?s)
		("productivity" . ?p)
		("engineering" . ?e)
		("extra" . ?x)
		("culture" . ?c)
		("devops" . ?v)
		))

  ;; Allow setting single tags without the menu
  (setq org-fast-tag-selection-single-key 'expert)

  ;; Include the todo keywords
  (setq org-fast-tag-selection-include-todo t)

  ;; == Custom State Keywords ==
  (setq org-use-fast-todo-selection t)
  (setq org-todo-keywords
	'((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
      (sequence "WAITING(w@/!)" "INACTIVE(i@/!)" "|" "CANCELLED(C@/!)" "MEETING")))
  ;; Custom colors for the keywords
  (setq org-todo-keyword-faces
	'(("TODO" :foreground "red" :weight bold)
      ("NEXT" :foreground "blue" :weight bold)
      ("DONE" :foreground "forest green" :weight bold)
      ("WAITING" :foreground "orange" :weight bold)
      ("INACTIVE" :foreground "magenta" :weight bold)
      ("CANCELLED" :foregroundhttp://cachestocaches.com/2016/9/my-workflow-org-agenda/ "forest green" :weight bold)
      ("MEETING" :foreground "forest green" :weight bold)))
  ;; Auto-update tags whenever the state is changed
  (setq org-todo-state-tags-triggers
	'(("CANCELLED" ("CANCELLED" . t))
      ("WAITING" ("WAITING" . t))
      ("INACTIVE" ("WAITING") ("INACTIVE" . t))
      (done ("WAITING") ("INACTIVE"))
      ("TODO" ("WAITING") ("CANCELLED") ("INACTIVE"))
      ("NEXT" ("WAITING") ("CANCELLED") ("INACTIVE"))
      ("DONE" ("WAITING") ("CANCELLED") ("INACTIVE"))))
  (defun gs/mark-next-done-parent-tasks-todo ()
    "Visit each parent task and change NEXT (or DONE) states to TODO."
    ;; Don't change the value if new state is "DONE"
    (let ((mystate (or (and (fboundp 'org-state)
			    (member state
		    (list "NEXT" "TODO")))
		       (member (nth 2 (org-heading-components))
		   (list "NEXT" "TODO")))))
      (when mystate
	(save-excursion
	  (while (org-up-heading-safe)
	    (when (member (nth 2 (org-heading-components)) (list "NEXT" "DONE"))
	      (org-todo "TODO")))))))
  (add-hook 'org-after-todo-state-change-hook 'gs/mark-next-done-parent-tasks-todo 'append)

#+END_SRC

*** Poor mans dropbox/text-file-syncing
This attempts to sync an org file on save if it detects the file is in an ~/org/~ directory. Also added option to sync manually
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (defun jrm/sync-org ()
    "Pulls latest changes to org repo locally"
    (interactive)

    (shell-command "cd ~/org && git add -A; git commit -m \"$(date)\" && git pull origin master && git push origin master &"))
  (global-set-key (kbd "C-x C-j 1")  'jrm/sync-org)

  (defun jrm/sync-org-on-save ()
    "Detects if is an org file and is in org directory and if so, syncs changes"
    (if (equal major-mode 'org-mode)
	(if (string-match-p (regexp-quote "/org/") (file-name-directory buffer-file-name))
	    (jrm/sync-org))))

  (add-hook 'after-save-hook 'jrm/sync-org-on-save)

#+END_SRC



** Cider repl refreshing quil windows
AFAIK the default cider repl commands don't provide an easy way to refresh quil windows, so below are some hacked together commands to do so via a temporary shell buffer.
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (defun jrm/start-quil-repl ()
    "Start Quil repl from current buffer. Current buffer must be part of a Clojure/Quil project."
    (interactive)
    (let ((previousBuffer (current-buffer)))
      (get-buffer-create "quil-repl")
      (switch-to-buffer "quil-repl")
      (shell (current-buffer))
      (switch-to-buffer previousBuffer)
      (process-send-string "quil-repl" "lein repl\n")
      (process-send-string "quil-repl" "(use 'sketch.core)\n")))
  (global-set-key (kbd "C-x C-j Q")  'jrm/start-quil-repl)

  (defun jrm/reload-quil-repl ()
    "Easy reloading of Quil frames without destroying them. Assumes repl is running in a buffer named quil-repl."
    (interactive)
    (let ((previousBuffer (current-buffer)))
      (switch-to-buffer "quil-repl")
      (process-send-string "quil-repl" "(refresh)\n")
      (switch-to-buffer previousBuffer)))
  (global-set-key (kbd "C-x C-j C-q")  'jrm/reload-quil-repl)

  (defun jrm/exit-quil-repl ()
    "Exit running quil-repl buffer"
    (interactive)
    (let ((previousBuffer (current-buffer)))
      (switch-to-buffer "quil-repl")
      (process-send-string "quil-repl" "exit\n")
      (process-send-string "quil-repl" "exit\n")
      (kill-buffer "quil-repl")
      (switch-to-buffer previousBuffer)))
  (global-set-key (kbd "C-x C-j x")  'jrm/exit-quil-repl)

#+END_SRC

** EXWM
 #+BEGIN_SRC shell
   #!/bin/bash

   # Let java applications know that exwm is a non-reparenting WM
   export _JAVA_AWT_WM_NONREPARENTING=1
   exec emacs
 #+END_SRC
With EXWM it can act as a complete desktop environment.
#+BEGIN_SRC emacs-lisp
  (use-package exwm)
  (use-package exwm-config
    :ensure nil
    :config
    (exwm-config-default)
    (global-set-key (kbd "C-x O")  'exwm-workspace-switch-to-buffer))
#+END_SRC
***** Multiple Monitor Support

Fortunately EXWM also has support for multiple monitors.
#+BEGIN_SRC emacs-lisp
  (require 'exwm-randr)
  (setq exwm-randr-workspace-output-plist '(0 "eDP1" 1 "DP1-2" 3 "DP1-2"))
  (add-hook 'exwm-randr-screen-change-hook
	    (lambda () (start-process-shell-command "xrandr" nil "xrandr --output eDP1 --mode 2048x1152; xrandr --output eDP1 --mode 2048x1152 --right-of DP1-2 --auto")))
  (exwm-randr-enable)
#+END_SRC

Simple script for waking up second monitor after reattaching
#+BEGIN_SRC emacs-lisp
  (defun jrm/wake-second-monitor ()
      "Turns second monitor off and back on to wake it up. Helpful for exwm + X11 + multiple monitors."
    (interactive)
    (shell-command "xrandr --output DP1-2 --off && xrandr --output DP1-2 --auto"))
  (global-set-key (kbd "C-x C-j m") 'jrm/wake-second-monitor)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'dashboard-mode-hook (lambda () (shell-command "xrandr --output eDP1 --mode 2048x1152")))
#+END_SRC
***** DMenu Application Launcher
#+BEGIN_SRC emacs-lisp :tangle (if (string-equal system-type "gnu/linux") "~/.emacs" "")
  (use-package dmenu :bind ("s-SPC" . 'dmenu))
#+END_SRC
***** VLC/Multimedia
Occasionally it's helpful to be able to start, play, pause and exit vlc buffers while never having to leave your current buffer. This is particularly helpful for following along with training videos.
    #+BEGIN_SRC emacs-lisp :tangle (if (string-equal system-type "gnu/linux") "~/.emacs" "")
      (defvar videoBuffer "video-controller")

      (defun jrm/vlc-start-video-playlist ()
	"Start a video in VLC that can be controlled via emacs"
	(interactive)
	(let ((x (read-directory-name "Enter video directory:")))
	  (get-buffer-create videoBuffer)
	  (shell videoBuffer)
	  (process-send-string videoBuffer "cd ~/\n")
	  (process-send-string videoBuffer (concat "vlc -I rc " x "*.webm\n"))
	  (message "Now playing videos in directory %s." x)))
      (global-set-key (kbd "C-x C-j v s") 'jrm/vlc-start-video-playlist)

      (defun jrm/vlc-pause-video ()
	"Toggle pausing a running vlc stream"
	(interactive)
	(process-send-string videoBuffer "pause\n"))
      (global-set-key (kbd "C-x C-j v p") 'jrm/vlc-pause-video)

      (defun jrm/vlc-go-foward-10-video ()
	"Seek forward X seconds in a playing vlc stream"
	(interactive)
	(process-send-string videoBuffer "seek 10\n"))
      (global-set-key (kbd "C-x C-j v f") 'jrm/vlc-go-foward-10-video)

      (defun jrm/vlc-next-video ()
	"Jump to next video in playlist"
	(interactive)
	(process-send-string videoBuffer "next\n"))
      (global-set-key (kbd "C-x C-j v n") 'jrm/vlc-next-video)

      (defun jrm/vlc-last-video ()
	"Jump to previous video in playlist"
	(interactive)
	(process-send-string videoBuffer "prev\n"))
      (global-set-key (kbd "C-x C-j v l") 'jrm/vlc-last-video)

      (defun jrm/vlc-go-backward-10-video ()
	"Seek forward X seconds in a playing vlc stream"
	(interactive)
	(process-send-string videoBuffer "seek -10\n"))
      (global-set-key (kbd "C-x C-j v r") 'jrm/vlc-go-backward-10-video)

      (defun jrm/vlc-quit-video ()
	"Quit a running vlc stream"
	(interactive)
	(process-send-string videoBuffer "quit\n")
	(process-send-string videoBuffer "exit\n")
	(kill-buffer videoBuffer))
      (global-set-key (kbd "C-x C-j v q") 'jrm/vlc-quit-video)
    #+END_SRC
***** Audio Keys
#+BEGIN_SRC emacs-lisp
  (defun jrm/volume-increase ()
    "Bump up the volume by 5%"
    (interactive)
    (with-temp-buffer (shell-command "/usr/bin/amixer set Master 5%+" t))
    (message "%s" (shell-command-to-string "/usr/bin/amixer get Master")))
  (global-set-key (kbd "<XF86AudioRaiseVolume>") 'jrm/volume-increase)


  (defun jrm/volume-decrease ()
    "Bump down the volume by 5%"
    (interactive)
    (with-temp-buffer (shell-command "/usr/bin/amixer set Master 5%-" t))
    (message "%s" (shell-command-to-string "/usr/bin/amixer get Master")))
  (global-set-key (kbd "<XF86AudioLowerVolume>") 'jrm/volume-decrease)

  (defun jrm/volume-mute-toggle ()
    "Toggle volume mute on/off"
    (interactive)
    (with-temp-buffer (shell-command "/usr/bin/amixer set Master toggle" t))
    (message "%s" (shell-command-to-string "/usr/bin/amixer get Master")))
  (global-set-key (kbd "<XF86AudioMute>") 'jrm/volume-mute-toggle)

#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle (if (string-equal system-type "gnu/linux") "~/.emacs" "")
  (defun jrm/log-volume () "Send the audio status to the message buffer"
	 (message "%s" (shell-command-to-string (concat *amixer-path* " get Master"))))

  (defun jrm/volume-increase () "Bump up the volume by 5%"
    (interactive)
    (with-temp-buffer (shell-command (concat *amixer-path* " set Master 5%+") t))
    (jrm/log-volume))
  (global-set-key (kbd "<XF86AudioRaiseVolume>") 'jrm/volume-increase)

  (defun jrm/volume-decrease () "Bump down the volume by 5%"
    (interactive)
    (with-temp-buffer (shell-command (concat *amixer-path* " set Master 5%-") t))
    (jrm/log-volume))
  (global-set-key (kbd "<XF86AudioLowerVolume>") 'jrm/volume-decrease)

  (defun jrm/volume-mute-toggle () "Toggle volume mute on/off"
    (interactive)
    (with-temp-buffer (shell-command (concat *amixer-path* " set Master toggle") t))
    (jrm/log-volume))
  (global-set-key (kbd "<XF86AudioMute>") 'jrm/volume-mute-toggle)
#+END_SRC


***** Screenshots
 I took this from Uncle Dave's config. Its a super slick screenshot function for taking both fullscreen as well as region screenshots.
 #+BEGIN_SRC emacs-lisp :tangle (if (string-equal system-type "gnu/linux") "~/.emacs" "")
   (defun jrm/take-screenshot ()
     "Takes a fullscreenshot of the current workspace"
     (interactive)
     (when window-system
       (cl-loop for i downfrom 3 to 1 do
		(progn
		  (message (concat (number-to-string i) "..."))
		  (sit-for 1)))
       (message "Cheese!")
       (sit-for 1)
       (start-process "screenshot" nil "import" "-window" "root"
		      (concat  *screenshot-dir* (current-time-string) ".png"))
       (message "Screenshot taken!")))
   (global-set-key (kbd "C-x C-j <C-print>") 'jrm/take-screenshot)

   (defun jrm/take-screenshot-region ()
     "Takes a screenshot of a region selected by the user"
     (interactive)
     (when window-system
       (call-process "import" nil nil nil ".newScreenshot.png")
       (call-process "convert" nil nil nil ".newScreenshot.png" "-shave" "1x1"
		     (concat (getenv "HOME") "/Pictures/" (current-time-string) ".png"))
       (call-process "rm" nil nil nil ".newScreenshot.png")))
   (global-set-key (kbd "C-x C-j <print>") 'jrm/take-screenshot-region)
 #+END_SRC
  
***** Lock screen with slock
#+BEGIN_SRC emacs-lisp
    (exwm-input-set-key (kbd "s-l") (lambda () (interactive) (start-process "" nil "/usr/bin/slock")))
  #+END_SRC

***** Interacting with GUI Applications
I find the default way (C-c C-q) of exwm sending keys like ctrl to an async buffer difficult. C-c C-c is much simpler for me.
#+BEGIN_SRC emacs-lisp
    (define-key exwm-mode-map [?\C-c ?\C-c] 'exwm-input-send-next-key)
  #+END_SRC


