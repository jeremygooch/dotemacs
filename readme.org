#+TITLE: Jeremy's Emacs Config
:PROPERTIES:
#+AUTHOR: Jeremy Gooch
#+STARTUP: overview
#+PROPERTY: header-args :results silent :tangle yes
#+SEQ_TODO: TODO(t) | DONE(d)
:END:

* Dependencies
 - Update variables for local setup
 - [[https://github.com/BurntSushi/ripgrep][ripgrep]] (rg) for better grep
 - node for JS cli, recommend [[https://github.com/nvm-sh/nvm][nvm]] for managing versions
 - [[https://github.com/microsoft/TypeScript][Typescript server]]
 - [[https://emacs-lsp.github.io/lsp-mode/page/lsp-angular/][Angular Language Server]]
 - [[https://github.com/jwiegley/use-package][Use Package]] cloned to [[~/.emacs.d][.emacs.d]]
 - eslint: ~npm i -g eslint~
 - html support: ~npm install -g vscode-html-languageserver-bin~
 - [[https://fonts.google.com/specimen/Roboto][Roboto]] and [[https://fonts.google.com/specimen/Inconsolata?authuser=3&hl=fa][Inconsolata]] fonts

** Non critical deps
- Latex (for some notes)

* Initialization
** early-init.el
In Emacs >= 27.1, the early-init.el file is run before the GUI is created. This can be used to take care of a few miscellaneous odds and ends.

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
  ;; -*- lexical-binding: t; -*-

  ;; -------------------------------------------------------------------------------- ;;
  ;; This early-init.el file was auto-tangled from an orgmode file.                   ;;
  ;; -------------------------------------------------------------------------------- ;;

  ;; Garbage Collections
  (setq gc-cons-threshold 100000000) ;; ~100mb
  (setq read-process-output-max 3000000) ;; ~3mb
  (setq gc-cons-percentage 0.6)

  ;; Compile Warnings
  (setq comp-async-report-warnings-errors nil) ;; native-comp warning
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))

  ;; Whether to make packages available when Emacs starts
  (setq package-enable-at-startup nil)

  ;; Disables bi-directional editing (i.e. writing in both Arabic and English)
  (setq-default bidi-display-reordering 'left-to-right 
                bidi-paragraph-direction 'left-to-right)
  (setq bidi-inhibit-bpa t)  ; emacs 27 only - disables bidirectional parenthesis

  ;; Misc UI optimizations
  (setq fast-but-imprecise-scrolling t)
  (setq inhibit-compacting-font-caches t)
  ;; Slow down the UI updates a bit
  (setq idle-update-delay 1.0)
#+end_src

** Personal Information
Header of tangled output
#+begin_src emacs-lisp :tangle ~/.emacs
  ;; -*- lexical-binding: t; -*-
  ;;; 
  ;;; Jeremy's Emacs Configuration
  ;;;

  ;; Copyright (C) Jeremy Gooch
  ;; Author: Jeremy Gooch <jeremy.gooch@gmail.com>
  ;; URL: https://github.com/jeremygooch/dotemacs
  ;; This file is not part of GNU Emacs.
  ;; This file is free software.

  ;; ------- The following code was auto-tangled from an Orgmode file. ------- ;;

#+end_src

For the sake of completeness, configure name and email address
#+BEGIN_SRC emacs-lisp  :tangle ~/.emacs
  (setq user-full-name "Jeremy Gooch"
        user-mail-address "jeremy.gooch@gmail.com")
#+END_SRC

Setup a prefix for custom commands.
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (progn (define-prefix-command 'jrm-key-map))
  (global-set-key (kbd "C-x C-j") jrm-key-map)
#+END_SRC

** Packages
*** Set Sources
#+begin_src emacs-lisp :tangle ~/.emacs
  (require 'package)
  
  (setq package-archives '(
                           ("melpa-stable" . "http://stable.melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")
                           ("gnu" . "http://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")))
  (package-initialize)
#+end_src

*** use-package Setup
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (eval-when-compile
    (require 'use-package))

  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
  (setq use-package-verbose nil)

  ;; Allow use-package to install missing system packages
  (use-package use-package-ensure-system-package :ensure t)
  #+END_SRC

** Better Garbage Collection Strategy
#+begin_src emacs-lisp :tangle ~/.emacs
  (use-package gcmh
    :diminish gcmh-mode
    :config
    (setq gcmh-idle-delay 5
          gcmh-high-cons-threshold (* 16 1024 1024))  ; 16mb
    (gcmh-mode 1))

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-percentage 0.1))) ;; Default value for `gc-cons-percentage'

#+end_src

* Global Variables
** System specific variables
Make sure to copy to =~/.emacs.d=
#+begin_src emacs-lisp :tangle ~/.emacs
(load (expand-file-name "jrm-variables.el" user-emacs-directory))
#+end_src
** Custom Files
    #+begin_src emacs-lisp :tangle ~/.emacs
      (if (file-exists-p "~/.emacs.d/jrm-util.el") (load "~/.emacs.d/jrm-util.el"))
      (if (file-exists-p "~/.emacs.d/tf.el") (load "~/.emacs.d/tf.el"))
    #+end_src

** Path

#+BEGIN_SRC emacs-lisp :tangle (if (string-equal system-type "darwin") "~/.emacs" "")
  (setq exec-path (append exec-path '("/usr/local/bin")))
  (use-package exec-path-from-shell
    :init
    (exec-path-from-shell-initialize))

#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  ;; (setq exec-path (cons (expand-file-name (concat *node-dir* "sass")) exec-path))
  (setq exec-path (append exec-path '("/usr/local/git/bin")))
  (setq exec-path (append exec-path (list (concat *node-dir* "bin/"))))
  ;; (setq exec-path (append exec-path (list *deno-dir*)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  ;; (setq exec-path (cons (expand-file-name (concat *node-dir* "sass")) exec-path))
  ;; (setenv "PATH" (concat (getenv "PATH") ":/usr/local/git/bin"))
  (setenv "PATH" (concat (getenv "PATH") (concat ":" *node-dir* "bin/")))
#+END_SRC

* Opinionated Configurations
Setup a prefix for my custom commands.
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (progn (define-prefix-command 'jrm-key-map))
  (global-set-key (kbd "C-x C-j") jrm-key-map)
#+END_SRC

** General Configuration
*** Basic Emacs Settings Preferences
I prefer emacs to just ask y/n not yes/no
 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (fset 'yes-or-no-p 'y-or-n-p)
 #+END_SRC

When killing a buffer always pick the current buffer by default
#+BEGIN_SRC emacs-lisp  :tangle ~/.emacs
  (defun kill-current-buffer ()
    "Kills the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC

Prevent async shell command buffers from popping-up:
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (add-to-list 'display-buffer-alist
    '("\\*Async Shell Command\\*.*" display-buffer-no-window))
#+END_SRC

Fix emacs' regex
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (setq-default pcre-mode t)
#+END_SRC

Use aspell for Mac (aspell can be installed with brew)
#+BEGIN_SRC emacs-lisp :tangle (if (string-equal system-type "darwin") "~/.emacs" "")
(setq ispell-program-name "/usr/local/bin/aspell")
#+END_SRC

Silence alarms
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (setq ring-bell-function 'ignore)
#+END_SRC

#+begin_src emacs-lisp :tangle ~/.emacs
  (save-place-mode 1)
#+end_src

*** Dired
Some basic Dired setup
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil)
  (setq dired-listing-switches "-alh")
#+END_SRC

It's nice to be able to tab through directories in dired, and I'm a sucker for eye candy with icons
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (defun jrm/dired-subtree-toggle-and-refresh ()
    "Calls dired toggle and refreshes the buffer."
    (interactive)
    (dired-subtree-toggle)
    (revert-buffer))

  (use-package dired-subtree
    :after dired
    :config
    (bind-key "<tab>" #'jrm/dired-subtree-toggle-and-refresh dired-mode-map)
    (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map))

  (use-package all-the-icons-dired)
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+END_SRC

Allow uncompressing zip files
#+begin_src emacs-lisp :tangle ~/.emacs
  (eval-after-load "dired-aux"
     '(add-to-list 'dired-compress-file-suffixes 
		   '("\\.zip\\'" ".zip" "unzip")))
#+end_src

*** Tramp
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (use-package tramp :config (setq tramp-default-method "scp"))
#+END_SRC

*** RipGrep
Use ripgrep by default
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (use-package rg
    :config
    (rg-define-search work
      :flags ("--hidden -g '!e2e/'")))
#+END_SRC

*** IBuffer
#+BEGIN_SRC emacs-lisp  :tangle ~/.emacs
	(global-set-key (kbd "C-x C-b") 'ibuffer)
	(setq ibuffer-saved-filter-groups
	(quote (("default"
		 ("dired" (mode . dired-mode))
		 ("org" (mode . org-mode))
		 ("shell" (mode . shell-mode))
		 ("git" (name . "^magit\*"))
		 ("Slack" (or (mode . slack-mode)
						(name . "^\\*Slack.*$")))
		 ("email" (name . "^\\*mu4e-.*\\*$"))
		 ("ecmascript" (or (mode . javascript-mode)
					 (name . "^.*.js$")
					 (name . "^.*.ts")
					 (name . "^.*.json$")))
		 ("markup" (or (mode . web-mode)
						 (name . "^.*.tpl")
						 (name . "^.*.mst")
						 (name . "^.*.html")))
		 ("images" (name . "^.*png$"))
		 ("process" (or (mode . grep-mode)
				(name . "^\\*tramp*$")))
		 ("emacs" (or (name . "^\\*scratch\\*$")
						(name . "^\\*Messages\\*$")
						(name . "^\\*eww\\*$")
						(name . "^\\*GNU Emacs\\*$")))))))
	(add-hook 'ibuffer-mode-hook (lambda () (ibuffer-switch-to-saved-filter-groups "default")))
#+END_SRC

*** GPG Pinentry
Instead of using the display's popup, prompt for gpg creds in the minibuffer
#+BEGIN_SRC emacs-lisp  :tangle ~/.emacs
  (setq epa-pinentry-mode 'loopback)
#+END_SRC

** Introspection
*** Ivy/Counsel/Swiper
Generic auto-complete with Ivy which 
 #+BEGIN_SRC emacs-lisp  :tangle ~/.emacs
   (use-package ivy :demand
     :diminish ivy-mode
     :config
     (setq ivy-use-virtual-buffers t
	   ivy-count-format "%d/%d ")
     (global-set-key (kbd "C-x b") 'ivy-switch-buffer))
   (ivy-mode 1)
   (setq ivy-use-selectable-prompt t)

   (use-package ivy-prescient
     :config (ivy-prescient-mode))
 #+END_SRC

 Ivy enhanced search (swiper) and common Emacs meta commands (counsel)
 #+BEGIN_SRC emacs-lisp  :tangle ~/.emacs
   (use-package counsel
     :config
     (global-set-key (kbd "M-x") 'counsel-M-x)
     (global-set-key (kbd "C-M-SPC") 'counsel-git))

   (use-package swiper
     :config
     (global-set-key (kbd "C-s") 'swiper-isearch))
 #+END_SRC

*** Which key
Some quick help for when I get stuck in the middle of a command
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (use-package which-key :config (which-key-mode))
#+END_SRC

** File Editing/Navigation
*** General Settings
 Keep temporary and backup buffers out of current directory like a civilized human being.
 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (custom-set-variables
    '(auto-save-file-name-transforms '((".*" "~/.emacs.d/autosaves/\\1" t)))
    '(backup-directory-alist '((".*" . "~/.emacs.d/backups/")))
    '(delete-old-versions t))

   (make-directory "~/.emacs.d/autosaves/" t)
   (setq create-lockfiles nil)
 #+END_SRC

Replace region with next keystroke.
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (delete-selection-mode 1)
#+END_SRC

Disable bidirectional editing for performance issues when opening large files.
#+begin_src emacs-lisp :tangle ~/.emacs
  (setq bidi-paragraph-direction 'left-to-right)
#+end_src

*** Yasnippet
    #+begin_src emacs-lisp :tangle ~/.emacs
      (use-package yasnippet
        :init (setq yas-snippet-dirs
                    '("~/src/dotemacs/snippets"))
        :config (yas-global-mode)
        )

    #+end_src
*** In-file Navigation
Easier paragraph jumping
 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (global-set-key (kbd "M-p") 'backward-paragraph)
   (global-set-key (kbd "M-n") 'forward-paragraph)
 #+END_SRC

Avy is great for speed-of-thought navigation
 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (use-package avy)
   (global-set-key (kbd "M-s") 'avy-goto-char-timer)
   (global-set-key (kbd "C-c SPC") 'avy-goto-line)
 #+END_SRC

Turn on linum mode for almost everything.
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (global-set-key (kbd "C-c l l") 'display-line-numbers-mode)
#+END_SRC

Adjust the local mark ring pop key sequence, so after pressing `C-u C-SPC`, you can just press `C-SPC` to keep jumping.
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (setq set-mark-command-repeat-pop t)
#+END_SRC

*** Programming
Setup basic editorconfig plugin for closer integration with other tools
#+begin_src emacs-lisp :tangle ~/.emacs
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))
#+end_src
**** LSP
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (use-package lsp-mode
    :hook (typescript-mode . lsp)
    :hook (javascript-mode . lsp)
    :hook (js2-mode . lsp)
    :hook (html-mode . lsp)
    :hook (scss-mode . lsp)
    :hook (sass-mode . lsp)
    :hook (css-mode . lsp)
    :hook (web-mode . lsp)
    :hook (clojure-mode . lsp)
    :commands lsp
    :bind (("M-." . lsp-find-definition))
    :bind (("M-n" . forward-paragraph))
    :bind (("M-p" . backward-paragraph))
    :config
    (dolist (m '(clojure-mode
		 clojurec-mode
		 clojurescript-mode
		 clojurex-mode))
      (add-to-list 'lsp-language-id-configuration `(,m . "clojure")))
    :config
    (with-eval-after-load 'lsp-mode
      (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\test\\'")))


  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
  ;; optionally if you want to use debugger
  (use-package dap-mode)
  ;; (global-set-key (kbd "M-p") 'backward-paragraph)
  (define-key lsp-signature-mode-map (kbd "M-p") 'backward-paragraph)
  (define-key lsp-signature-mode-map (kbd "M-n") 'forward-paragraph)
  ;; (global-set-key (kbd "M-n") 'forward-paragraph)

  #+END_SRC

***** LSP Variables
#+begin_src emacs-lisp :tangle ~/.emacs
  (setq lsp-eslint-unzipped-path (concat *node-dir* "bin"))
#+end_src

Lsp Mode Performance adjustments (see https://emacs-lsp.github.io/lsp-mode/page/performance/).
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  ;; (setq gc-cons-threshold 100000000)
  ;; (setq read-process-output-max 3000000) ;; ~3mb
  (setq lsp-idle-delay 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (setq lsp-html-server-command (quote
                                 ((concat *node-dir* "bin/html-languageserver") "--stdio")))

  (setq lsp-clients-angular-language-server-command (quote
                                                     ("node" (concat *node-dir* "lib/node_modules/@angular/language-server") "--ngProbeLocations" (concat *node-dir* "lib/node_modules") "--tsProbeLocations" (concat *node-dir* "lib/node_modules") "--stdio")))
#+END_SRC

***** LSP Utility functions
#+begin_src emacs-lisp :tangle ~/.emacs
(defun jrm/lsp-clear-blacklist () "Clears the blacklist folders for LSP Mode"
       (interactive)
       (setf (lsp-session-folders-blacklist (lsp-session)) nil)
       (lsp--persist-session (lsp-session)))
#+end_src
**** LSP + DAP

***** DAP Chrome
Dap is used for debugging in browser(s). More information at: https://emacs-lsp.github.io/lsp-mode/tutorials/reactjs-tutorial/
#+begin_src emacs-lisp :tangle ~/.emacs
  ;; (require 'dap-chrome)
#+end_src

***** DAP NodeJS
#+begin_src emacs-lisp :tangle ~/.emacs
  (require 'dap-node)
  (defun jrm/dap-node-stop-all ()
    "Kill all background node processes running in inspect"
    (interactive)
    (dap-delete-all-sessions)
    (async-shell-command "kill `ps -A | grep 'inspect-brk' | awk '{print $1}'`"))
#+end_src


**** Lisps
Paredit for maintaining sanity while working with lisp
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (defun paredit-enable-modes () (add-hook 'emacs-lisp-mode-hook 'paredit-mode))

  (use-package paredit :config (paredit-enable-modes))
#+END_SRC

Some general settings for lisp dialects (elisp, clojure, etc).
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
  (add-hook 'clojure-mode-hook          #'enable-paredit-mode)
#+End_SRC

***** elisp
Make evaluating elisp buffers even quicker
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (global-set-key (kbd "C-c C-e")  'eval-buffer)
#+END_SRC
***** Clojure Development
Clojure with Cider for interactive Clojure development
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package clojure-mode
    :defer
    :config
    (add-to-list 'auto-mode-alist '("\\.edn$" . clojure-mode))
    (add-to-list 'auto-mode-alist '("\\.boot$" . clojure-mode))
    (add-to-list 'auto-mode-alist '("\\.cljs.*$" . clojure-mode))
    (add-to-list 'auto-mode-alist '("lein-env" . enh-ruby-mode)))

  (use-package eldoc :diminish eldoc-mode)

  (use-package cider
    :defer
    :config
    (add-hook 'cider-repl-mode-hook #'eldoc-mode)
    (setq cider-repl-pop-to-buffer-on-connect t) ;; go to the repl when done connecting
    (setq cider-show-error-buffer t)
    (setq cider-auto-select-error-buffer t)) ;; jump to error message
#+END_SRC

****** Clojure/Quil Workflow Customization
A popup HSV color picker is helpful for quick prototyping/sketching
#+BEGIN_SRC emacs-lisp :tangle no
  (defun convert-range-360 (val)
    "Converts a value from a 0-1 range to 0-360 range. Used for calculating hue."
    (* (/ (- val 0) (- 1 0)) (+ (- 360 0) 0)))

  (defun jrm/insert-color-hsb ()
    "Select a color and insert its hue/saturation/brightness[lumenosity] format."
    (interactive "*")
    (let ((buf (current-buffer)))
      (custom-set-variables '(list-colors-sort (quote hsv)))
      (list-colors-display
       nil nil `(lambda (name)
		  (interactive)
		  (quit-window)
		  (with-current-buffer ,buf
		    (setq hsb (apply 'color-rgb-to-hsl (color-name-to-rgb name)))
		    (setq hue (convert-range-360 (nth 0 hsb)))
		    (setq sat (* 100 (nth 1 hsb)))
		    (insert (format "%s" hue 100) " " (format "%s" sat) " " (format "%s" 100.0)))))))
  (global-set-key (kbd "C-x C-j H")  'jrm/insert-color-hsb)
#+END_SRC

**** ECMAScript
Tern is a require package and can be installed with ~sudo npm install -g tern~

***** General Settings
Some basic code folding
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (use-package yafolding
    :hook ((js-mode . yafolding-mode)
           (js2-mode . yafolding-mode)
           (typescript-mode . yafolding-mode)
           (fundamental-mode . yafolding-mode)))
#+END_SRC

Use js2 mode rather than the built in javascript mode.
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (use-package js2-mode
    :defer
    :init
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    (add-to-list 'auto-mode-alist '("\\.mjs\\'" . js2-mode)))

  (bind-keys*
   ("M-." . lsp-find-definition))
#+END_SRC

Setup ECMA unicode glyphs
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (defun jrm/ecma-prettify-symbols ()
    "Adds common ECMA symobls to prettify-symbols-alist."
    (push '(">=" . ?≥) prettify-symbols-alist)
    (push '("=>" . ?⇒) prettify-symbols-alist)
    (push '("<=" . ?≤) prettify-symbols-alist)
    (push '("===" . ?≡) prettify-symbols-alist)
    (push '("!=" . ?≠) prettify-symbols-alist)
    (push '("!==" . ?≢) prettify-symbols-alist)
    (push '("&&" . ?∧) prettify-symbols-alist)
    (prettify-symbols-mode))

  (add-hook 'js2-mode-hook 'jrm/ecma-prettify-symbols)
  (add-hook 'js-mode-hook 'jrm/ecma-prettify-symbols)
#+END_SRC

Web Beautify for unminifying assets
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (use-package web-beautify)
#+END_SRC

***** Angular/React/TS Development
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (custom-set-variables
   '(flycheck-javascript-eslint-executable (concat *eslint-dir* "eslint.js")))
  (use-package flycheck :diminish flycheck-mode)

#+END_SRC

Enable typescript frameworks for just typescript and prototype
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (setq typescript-enabled-frameworks '(typescript prototype))
#+END_SRC

Rjsx for JSX
#+begin_src emacs-lisp :tangle ~/.emacs
  (use-package rjsx-mode
    :config (add-to-list 'auto-mode-alist '("src/elfeed-web-react/.*\\.js\\'" . rjsx-mode)))
#+end_src

Add prettier support. Assumes prettier is installed globally.
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(defun prettier-before-save ()
  "Add this to .emacs to run refmt on the current buffer when saving:
 (add-hook 'before-save-hook 'prettier-before-save)."
  (interactive)
  (when (member major-mode '(js-mode js2-mode)) (prettier)))
(add-hook 'before-save-hook 'prettier-before-save)
#+END_SRC

Add ECMA unicode glyphs that I like
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (add-hook 'typescript-mode-hook 'jrm/ecma-prettify-symbols)
#+END_SRC

***** Indentation
Defining custom indentation based on project paths and setting them to functions that I can call as needed. 
#+begin_src emacs-lisp :tangle ~/.emacs
  (defun jrm/setup-indent (n)
    (setq indent-tabs-mode nil)
    (setq-local c-basic-offset n)
    (setq-local javascript-indent-level n)
    (setq-local js-indent-level n)
    (setq-local typescript-indent-level n)
    (setq-local web-mode-markup-indent-offset n)
    (setq-local web-mode-css-indent-offset n)
    (setq-local web-mode-code-indent-offset n)
    (setq-local sass-indent-offset n)
    (setq-local css-indent-offset n))

  (defun jrm/two-space-code-style ()
    "indent 2 spaces width"
    (interactive)
    (message "Using 2 spaces coding style")
    (jrm/setup-indent 2))

  (defun jrm/four-space-code-style ()
    "indent 4 spaces width"
    (interactive)
    (message "Using 4 spaces coding style")
    (jrm/setup-indent 4))
#+end_src

#+begin_src emacs-lisp :tangle (if (string-equal system-type "darwin") "~/.emacs" "")
  (add-hook 'typescript-mode-hook 'jrm/four-space-code-style)
  (add-hook 'lua-mode-hook 'jrm/four-space-code-style)
  (add-hook 'web-mode-hook 'jrm/four-space-code-style)
  (add-hook 'js-mode-hook 'jrm/four-space-code-style)
  (add-hook 'js2-mode-hook 'jrm/four-space-code-style)
  (add-hook 'sass-mode-hook 'jrm/four-space-code-style)
  (add-hook 'scss-mode-hook 'jrm/four-space-code-style)
#+end_src

#+begin_src emacs-lisp :tangle (if (not (string-equal system-type "darwin")) "~/.emacs" "")
  (add-hook 'typescript-mode-hook 'jrm/two-space-code-style)
  (add-hook 'lua-mode-hook 'jrm/two-space-code-style)
  (add-hook 'web-mode-hook 'jrm/two-space-code-style)
  (add-hook 'json-mode-hook 'jrm/two-space-code-style)
  (add-hook 'js2-mode-hook 'jrm/two-space-code-style)
  ;; (add-hook 'typescript-mode-hook 'jrm/develop-environment)
  ;; (add-hook 'lua-mode-hook 'jrm/develop-environment)
  ;; (add-hook 'web-mode-hook 'jrm/develop-environment)
  ;; (add-hook 'json-mode-hook 'jrm/neon-code-style)
#+END_SRC
**** HTML/CSS
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (use-package sass-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.scss\\'" . scss-mode)))

  (use-package web-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mst\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode))
    :custom (web-mode-enable-auto-indentation nil))

#+END_SRC

**** PHP Development
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (use-package php-mode
    :defer
    :config
    (autoload 'php-mode "php-mode-improved" "Major mode for editing php code." t)
    (add-to-list 'auto-mode-alist '("\\.php$" . php-mode))
    (add-to-list 'auto-mode-alist '("\\.inc$" . php-mode)))
#+END_SRC

**** Additional Languages
Various modes helpful for development
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (use-package yaml-mode
    :defer
    :config (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
  (use-package restclient :defer)
  (use-package groovy-mode :defer)
  (use-package go-mode :defer)
  (use-package emmet-mode
    :defer
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'css-mode-hook 'emmet-mode)
    (add-hook 'web-mode-hook 'emmet-mode)
    (add-hook 'sass-mode-hook 'emmet-mode))
#+END_SRC

**** Version Control
Magit for version control

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (use-package magit
    :config
    (global-set-key (kbd "C-x g") 'magit-status)
    (add-hook 'magit-status-sections-hook 'magit-insert-stashes))
#+END_SRC

**** Company
#+begin_src emacs-lisp :tangle ~/.emacs
  (use-package company
    :after lsp-mode
    :hook (prog-mode . company-mode)
    :config
    (setq company-minimum-prefix-length 2)
    (setq company-idle-delay 0.2))

    (global-company-mode)
    (global-set-key (kbd "TAB") #'company-indent-or-complete-common)

  ;;(setq tab-always-indent 'complete)
  (setq company-tooltip-align-annotations t)

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

** Theme/UI
*** General Settings
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (defun jrm/modus-operandi_extra-adjustments (theme)
    "Updates additional colors and such based on the current modus theme"
    (let ((isOperandi (string-equal theme "operandi")))
      (if isOperandi
	  (custom-set-faces
	   '(org-block ((t (:inherit shadow :extend t :background "gray83"))))
	   '(org-block-begin-line ((t (:extend t :background "gray95" :foreground "gray59" :height 0.9))))
	   '(org-block-end-line ((t (:extend t :background "gray95" :foreground "gray59" :height 0.9)))))
	(custom-set-faces
	 '(org-block ((t (:inherit shadow :extend t :background "gray20"))))
	 '(org-block-begin-line ((t (:extend t :background "gray11" :foreground "dim gray" :height 0.9))))
	 '(org-block-end-line ((t (:extend t :background "gray11" :foreground "dim gray" :height 0.9))))))
      (if isOperandi
	  (setq dashboard-startup-banner (concat *dotemacs-dir* "assets/Lambda_light.png"))
	(setq dashboard-startup-banner (concat *dotemacs-dir* "assets/Lambda_dark.png")))
  ;
  ; (if isOperandi
  ;; 	(set-face-background hl-line-face "LightSteelBlue1")
  ;;       (set-face-background hl-line-face "#040e17"))

      ))

  (defun jrm/modus-themes-toggle () ""
	 (interactive)
	 (pcase (modus-themes--current-theme)
	   ('modus-operandi (jrm/modus-operandi_extra-adjustments "operandi"))
	   ('modus-vivendi (jrm/modus-operandi_extra-adjustments "vivendi"))
	   (_ (message "No modus theme enabled"))))


  (use-package modus-themes
    :ensure
    :init
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-italic-constructs nil
          modus-themes-bold-constructs t
          modus-themes-mode-line '(borderless)
          modus-themes-paren-match '(bold intense underline)
          modus-themes-region '(bg-only))

    ;; Load the theme files before enabling a theme
    (modus-themes-load-themes)

    ;; Enable personal customizations after loading a modus theme
    (add-hook 'modus-themes-after-load-theme-hook 'jrm/modus-themes-toggle)

    :config
    ;; Load the theme of your choice:
    (modus-themes-load-operandi) ;; OR (modus-themes-load-vivendi)
    :bind ("<f5>" . modus-themes-toggle))
#+END_SRC

Remove default scrollbars
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
(scroll-bar-mode -1)
#+END_SRC

Hide the default toolbars
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (menu-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC

I prefer to see trailing whitespace but not for every mode (e.g. org, elfeed, etc)
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (use-package whitespace
    :config
    (setq-default show-trailing-whitespace t)
    (defun no-trailing-whitespace ()
      (setq show-trailing-whitespace nil))
    (add-hook 'minibuffer-setup-hook              'no-trailing-whitespace)
    (add-hook 'dashboard-mode-hook                'no-trailing-whitespace)
    (add-hook 'eww-mode-hook                      'no-trailing-whitespace)
    (add-hook 'vterm-mode-hook                    'no-trailing-whitespace)
    (add-hook 'shell-mode-hook                    'no-trailing-whitespace)
    (add-hook 'mu4e:view-mode-hook                'no-trailing-whitespace)
    (add-hook 'eshell-mode-hook                   'no-trailing-whitespace)
    (add-hook 'help-mode-hook                     'no-trailing-whitespace)
    (add-hook 'term-mode-hook                     'no-trailing-whitespace)
    (add-hook 'slack-message-buffer-mode-hook     'no-trailing-whitespace)
    (add-hook 'mu4e:view-mode-hook                'no-trailing-whitespace)
    (add-hook 'calendar-mode-hook                 'no-trailing-whitespace))

#+END_SRC

Use visual line mode for text wrapping
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (global-visual-line-mode t)
#+END_SRC
*** Custom Colors
**** Shells
  #+begin_src emacs-lisp :tangle no
    ;; function to switch background color
    (defun buffer-background-switch ()
      (interactive)
      (setq buffer-face-mode-face `(:background "#0a1310" :foreground "#218352"))
      (custom-set-faces '(comint-highlight-prompt ((t (:inherit minibuffer-prompt :foreground "#2cc46c")))))
      (buffer-face-mode 1))

    (add-hook 'shell-mode-hook 'buffer-background-switch)
    (add-hook 'eshell-mode-hook 'buffer-background-switch)
  #+end_src

**** Org Mode
Set Org mode source block background color to dark gray so it stands out from the typical background
#+begin_src emacs-lisp :tangle ~/.emacs
  (custom-set-faces '(org-block ((t (:inherit shadow :background "gray83")))))
#+end_src
**** Org Tables
I commonly use org for db management so adding a quick way to shrink tables
#+begin_src emacs-lisp :tangle ~/.emacs
  (defun jrm/set-org-table-column-widths ()
    "This adds a row after the current Org Table row with a width cookie for each column"
    (interactive)
    (let ((new-width (read-string "Set width to: ")))
      (beginning-of-line)
      (set-mark-command nil)
      (end-of-line)
      (kill-ring-save (region-beginning) (region-end))
      (org-return)
      (org-yank)
      (beginning-of-line)
      (set-mark-command nil)
      (end-of-line)
      (save-restriction
        (narrow-to-region (region-beginning) (region-end))
        (goto-char (point-min))
        (while (search-forward-regexp "|[[:space:]][-_.A-Za-z0-9]+[[:space:]]" nil t)
          (replace-match (concat "| <" new-width "> "))))
      (org-table-shrink)
      (beginning-of-line)))
#+end_src

*** Dashboard
I like a nice big splash screen.
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner (concat *dotemacs-dir* "assets/Lambda_light.png"))
    (setq dashboard-items '((recents  . 10)))
    (setq dashboard-banner-logo-title ""))
#+END_SRC
*** Highlight line
Helpful for finding the cursor when jumping around
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (global-hl-line-mode +1)
  (set-face-background hl-line-face "LightSteelBlue1")
#+END_SRC

*** Ivy Posframe
    #+begin_src emacs-lisp :tangle ~/.emacs
      (use-package ivy-posframe
	:config
	(setq ivy-posframe-display-functions-alist
	      '((swiper          . ivy-posframe-display-at-frame-bottom-left)
		(complete-symbol . ivy-posframe-display-at-point)
		(counsel-M-x     . ivy-posframe-display-at-frame-center)
		(t               . ivy-posframe-display)))
	(ivy-posframe-mode 0)
	(custom-set-faces '(ivy-posframe ((t (:inherit default :background "black"))))))
    #+end_src

*** Modeline
Clean up modeline with diminish
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (use-package diminish)
#+END_SRC

Use the spaceline from spacemacs
#+begin_src emacs-lisp :tangle ~/.emacs
(use-package spaceline
  :config
  (require 'spaceline-config)
  (setq powerline-default-separator (quote wave))
  (spaceline-spacemacs-theme)
  (setq powerline-height 20)
  (set-face-attribute 'mode-line nil :box nil)
  (set-face-attribute 'mode-line-inactive nil :box nil))
#+end_src

Show spaceline icons
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
    (use-package spaceline-all-the-icons
      :after spaceline
      :config (spaceline-all-the-icons-theme))
  (custom-set-variables
   '(spaceline-all-the-icons-separator-type (quote arrow)))
#+END_SRC

*** Minibuffer
Display the current time and battery indicator
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (setq display-time-24hr-format t)
  (setq display-time-format "%H:%M - %d.%b.%y")
  (display-time-mode 1)
  (display-battery-mode 1)
#+END_SRC

*** Frames
#+BEGIN_SRC emacs-lisp :tangle (if (string-equal system-type "darwin") "~/.emacs" "")
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))

  ;; Autohide the top panel if necessary
  (setq ns-auto-hide-menu-bar t)
  (toggle-frame-maximized)

  (set-face-attribute 'default nil :height 120)
#+END_SRC

#+begin_src emacs-lisp :tangle ~/.emacs
(global-set-key (kbd "<f9>") 'other-frame)
#+end_src
*** Mouse
We'll need to turn off the mouse from time to time
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (use-package disable-mouse :diminish disable-mouse-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
  (global-disable-mouse-mode)
#+END_SRC

Because linux runs exwm we shouldn't turn the mouse off completely.
#+BEGIN_SRC emacs-lisp :tangle (if (string-equal system-type "gnu/linux") "~/.emacs" "")
  (add-hook 'lisp-interaction-mode                'disable-mouse-mode)
  (add-hook 'shell-mode-hook                      'disable-mouse-mode)
  (add-hook 'org-src-mode-hook                    'disable-mouse-mode)
  (add-hook 'org-mode-hook                        'disable-mouse-mode)
  (add-hook 'javascript-mode-hook                 'disable-mouse-mode)
  (add-hook 'rjsx-mode-hook                       'disable-mouse-mode)
  (add-hook 'text-mode-hook                       'disable-mouse-mode)
  (add-hook 'web-mode-hook                        'disable-mouse-mode)
  (add-hook 'dired-mode-hook                      'disable-mouse-mode)
  (add-hook 'org-mode-hoook                       'disable-mouse-mode)
  (add-hook 'lisp-interaction-mode-hook           'disable-mouse-mode)
  (add-hook 'emacs-lisp-mode-hook                 'disable-mouse-mode)
  (add-hook 'special-mode-hook                    'disable-mouse-mode)
  (add-hook 'fundamental-mode-hook                'disable-mouse-mode)
  (add-hook 'groovy-mode-hook                     'disable-mouse-mode)
  (add-hook 'org-agenda-mode-hook                 'disable-mouse-mode)
  (add-hook 'eshell-mode-hook                     'disable-mouse-mode)
  (add-hook 'slack-message-buffer-mode-hook       'disable-mouse-mode)
  (add-hook 'typescript-mode-hook                 'disable-mouse-mode)
  (add-hook 'clojure-mode-hook                    'disable-mouse-mode)
  (add-hook 'repl-mode-hook                       'disable-mouse-mode)
#+END_SRC

*** Symbols
Show symbols by default
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (global-prettify-symbols-mode 1)
#+END_SRC

*** Manage Window
Go fullscreen and set the default font size.
#+BEGIN_SRC emacs-lisp :tangle (if (string-equal system-type "gnu/linux") "~/.emacs" "")
  (set-frame-parameter nil 'fullscreen 'fullboth)
  (set-face-attribute 'default nil :height 140)
  (set-face-attribute 'default nil :font "Inconsolata-14")
#+END_SRC

#+begin_src emacs-lisp :tangle (if (string-equal system-type "darwin") "~/.emacs" "")
  (set-face-attribute 'default nil :font "Inconsolata-18")
#+end_src

** Org Mode
Load some basic minor modes by default
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs 
  (add-hook 'org-mode-hook 'no-trailing-whitespace)
  (add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC

#+begin_src emacs-lisp :tangle ~/.emacs
  (setq org-hide-emphasis-markers t)
  ;; Copy the visible text (without formatting marks) by default
  ;; (define-key org-mode-map (kbd "M-w") 'org-copy-visible)
  ;; (define-key org-mode-map (kbd "M-W") 'kill-ring-save)
#+end_src
*** General Styling
Fonts and variable pitch mode for alignment issues with non-monospaced fonts.
/Variable pitch/ will use roboto, but override elements that need fixed-pitch (i.e. org-table) with a font that is monospaced (i.e. a font that is already fixed-pitch)
#+begin_src emacs-lisp :tangle ~/.emacs
  (add-hook 'org-mode-hook (lambda () (variable-pitch-mode t)))
  (add-hook 'org-mode-hook (lambda () (set-face-attribute 'org-table nil :inherit 'fixed-pitch)))
  (add-hook 'org-mode-hook (lambda () (set-face-attribute 'org-block nil :inherit 'fixed-pitch :height 0.8)))
  (custom-set-faces
   '(variable-pitch ((t (:family "Roboto"))))) ;; make sure this font is installed
#+end_src


Show the asterisks as bullets and set up indentation
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (use-package org-bullets :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

Show lists with a bullet rather than the =-= character.
#+begin_src emacs-lisp :tangle ~/.emacs
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src


*** Navigation
Setup an easy way to jump to an org headline using org-goto =C-c C-j=
#+BEGIN_SRC elisp :tangle ~/.emacs
  (setq org-goto-interface 'outline-path-completion
	org-goto-max-level 10)

  (setq org-outline-path-complete-in-steps nil)
#+END_SRC

#+begin_src elisp :tangle ~/.emacs
  (global-set-key (kbd "C-o") 'other-window)
  (define-key dired-mode-map (kbd "C-o") 'other-window)
  (define-key rg-mode-map (kbd "C-o") 'other-window)
  (define-key grep-mode-map (kbd "C-o") 'other-window)
  ;; (define-key bookmark-bmenu-mode-map (kbd "C-o") 'other-window)
#+end_src

*** Source Blocks
When evaluating a source code block in org mode do not prompt for input, just run it.
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

Stylistic preferences for using the pre-v9 version of org mode (E.g. [[https://orgmode.org/manual/Easy-templates.html][easy templates]] and how to split the source window when editing, make the source blocks full width.)
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (require 'org-tempo)
  (setq org-src-window-setup 'other-window)

  (custom-set-faces
   '(org-block ((t (:inherit shadow :extend t :background "gray83"))))
   '(org-block-begin-line ((t (:extend t :background "gray95" :foreground "gray59" 
:height 0.9))))
   '(org-block-end-line ((t (:extend t :background "gray95" :foreground "gray59" :height 0.9)))))
#+END_SRC

Set the node environment
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (setq org-babel-js-cmd (concat *node-dir* "bin/node"))
#+END_SRC

**** Source Block Shortcuts

#+begin_src emacs-lisp :tangle ~/.emacs
  (add-to-list
   'org-structure-template-alist
   '("r" . "src restclient"))
  (add-to-list
   'org-structure-template-alist
   '("js" . "src js"))
  (add-to-list
   'org-structure-template-alist
   '("ts" . "src typescript"))
  (add-to-list
   'org-structure-template-alist
   '("el" . "src emacs-lisp"))
  (add-to-list
   'org-structure-template-alist
   '("b" . "src bash"))
  (add-to-list
   'org-structure-template-alist
   '("elt" . "src emacs-lisp :tangle ~/.emacs"))

  (add-to-list 'org-tempo-keywords-alist '("n" . "name"))

 #+end_src

**** Additional Modes
 Add some export modes for getting content out of org. Not using ~:defer~ here as I'm not sure it's helpful and adding it to ~ob-clojure~ throws a ~Wrong type argument: stringp, :defer~ error.
 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (use-package ox-twbs)
   (use-package ob-rust)
   (use-package ob-restclient)
   (require 'ob-clojure)
   (use-package ob-typescript :diminish typescript-mode)
 #+END_SRC

Allow asynchronous execution of org-babel src blocks so you can keep using emacs during long running scripts
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (use-package ob-async)
#+END_SRC

Load some languages by default
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (add-to-list 'org-src-lang-modes '("js" . "javascript")
	       '("php" . "php"))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (js . t)
     (lisp . t)
     (clojure . t)
     (typescript . t)
     (rust . t)
     (sql . t)
     (shell . t)
     (java . t)))
#+END_SRC

I like org source blocks for typescript to use different compiler settings than what ships with ob-typescript. Not sure if there's a better way to do this, but just overwriting the function from the source with the code below using the configuration I prefer.
#+begin_src emacs-lisp :tangle ~/.emacs
  (defun org-babel-execute:typescript (body params)
    "Execute a block of Typescript code with org-babel. This function is called by `org-babel-execute-src-block'"
    (let* ((tmp-src-file (org-babel-temp-file "ts-src-" ".ts"))
	   (tmp-out-file (org-babel-temp-file "ts-src-" ".js"))
	   (cmdline (cdr (assoc :cmdline params)))
	   (cmdline (if cmdline (concat " " cmdline) ""))
	   (jsexec (if (assoc :wrap params) ""
		     (concat " ; node " (org-babel-process-file-name tmp-out-file)))))
      (with-temp-file tmp-src-file (insert body))
      (let ((results (org-babel-eval (format "tsc %s --lib 'ES7,DOM' -out %s %s %s"
					     cmdline
					     (org-babel-process-file-name tmp-out-file)
					     (org-babel-process-file-name tmp-src-file)
					     jsexec) ""))
	    (jstrans (with-temp-buffer
		       (insert-file-contents tmp-out-file)
		       (buffer-substring-no-properties (point-min) (point-max)))))
	(if (eq jsexec "") jstrans results))))
#+end_src

For org-babel's clojure backend use cider rather than the default slime
#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-babel-clojure-backend 'cider)
#+END_SRC

*** Org Capture
Customize org capture to my liking
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (global-set-key (kbd "C-c c") 'org-capture)
  (setq org-capture-templates
	'((" " "TODOs ==============================" entry (file "") "")
	  ("w" "Work Todo" entry (file+headline "~/org/work/TeachForward/teachforward.org" "Todos")
	   "** TODO %? :tf:\n  %i\n  %a")
	  ("l" "Personal Todo\n" entry (file "~/org/personal/personal.org")
	   "*** TODO %? :personal:\n  %i\n  %a")
	  (" " "PROGRAMMING SNIPPETS ===============" entry (file "") "")
	  ("j" "JS Snippet" entry (file "~/org/personal/research/development/js/Javascript-snippets.org")
	   "* \n #+BEGIN_SRC js\n%?\n#+END_SRC\n\n[Date: %<%Y-%d-%m>]" :prepend t)
	  ("t" "TS Snippet\n" entry (file "~/org/personal/research/development/js/Javascript-snippets.org")
	   "* \n #+BEGIN_SRC typescript\n%?\n#+END_SRC\n\n[Date: %<%Y-%d-%m>]" :prepend t)
	  (" " "MEETINGS ===========================" entry (file "") "")
	  ("m" "Meeting\n" entry (file+headline "~/org/work/TeachForward/teachforward.org" "Meetings")
	   "** MEETING with %? :MEETING:\n  %i\n"  :clock-in t :clock-resume t)))

#+END_SRC

**** Global Org Capture
Simple command to open emacs (assumes it's already running) and launch org capture in a new frame. This can be bound to a global key sequence.
#+BEGIN_SRC bash :tangle no
emacsclient -ne "(make-capture-frame)"
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (server-start)

  (defadvice org-capture-finalize 
      (after delete-capture-frame activate)
    "Advise capture-finalize to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
	(delete-frame)))

  (defadvice org-capture-destroy
      (after delete-capture-frame activate)
    "Advise capture-destroy to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
	(delete-frame)))

  (use-package noflet
    :ensure t )
  (defun make-capture-frame ()
    "Create a new frame and run org-capture."
    (interactive)
    (make-frame '((name . "capture")))
    (select-frame-by-name "capture")
    (delete-other-windows)
    (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
      (org-capture)))

#+END_SRC

Helpful for bridging org and jira.
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (use-package ox-jira)
#+END_SRC

*** Remote Syncing
This attempts to sync an org file on save if it detects the file is in the ~*org-dir*~ directory.
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (defun jrm/git-auto-sync ()
    "Automatically stages, commits, pulls, and pushes the current branch's upstream settings. Commit message is current timestamp. Depends on Magit."
    (interactive)
    (if (string-match-p (regexp-quote *org-dir*) (file-name-directory buffer-file-name))
        (progn
          (magit-stage-modified)
          (magit-run-git-with-editor "commit" "-m" (format-time-string "%a %d %b %Y %H:%M:%S %Z"))
          (magit-run-git-async "pull")
          (magit-run-git-async "push"))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook 'jrm/git-auto-sync nil t)))
#+END_SRC

*** LaTex
Use xelatex for more latex options like fontspec
#+BEGIN_SRC elisp :tangle ~/.emacs
(setq org-latex-compiler "xelatex")
#+END_SRC

Show any latex previews by default
#+begin_src emacs-lisp :tangle ~/.emacs
  (custom-set-variables '(org-startup-with-latex-preview t))
#+end_src

*** TODOs/Agenda
Setup standard todo keywords
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (setq org-use-fast-todo-selection t)
  (setq org-todo-keywords
	'((sequence "TODO(t!)" "|" "DONE(d!)")
      (sequence "WORKFLOW TODO(w@/!)" "SOON(s@/!)" "|" "SOMEDAY(S@/!)")))
  ;; Custom colors for the keywords
  (setq org-todo-keyword-faces
	'(("TODO" :foreground "red" :weight bold)
      ("DONE" :foreground "forest green" :weight bold)
      ("WORKFLOW TODO" :foreground "#61afef" :weight bold)
      ("SOON" :foreground "#da8548" :weight bold)
      ("SOMEDAY" :foreground "#9963ad" :weight bold)))
#+END_SRC

File locations for org agenda
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (global-set-key (kbd "C-c a") 'org-agenda)
  (setq org-agenda-files (list "~/org/work/TeachForward/" "~/org/personal/" "~/.org-jira/"))

  (setq org-agenda-custom-commands
        '(("p" "Personal Week and Task List"
           ((agenda "")
            (alltodo)
            (search "* DONE"))
           ((org-agenda-files '("~/org/personal"))))
          ("j" "Jira Kanban Board"
           ((search ":status:   Open")
            (search ":status:   To Do")
            (search ":status:   Selected for Development")
            (search ":status:   In Development")
            (search ":status:   In Review")
            ;; (search ":status:   Ready for Test")
            ;; (search ":status:   In Test")
            (search ":status:   Ready for Demo"))
           ((org-agenda-files '("~/.org-jira"))))
          ("w" "Work Week and Task List"
           ((agenda "")
            (alltodo)
            (search "* DONE"))
           ((org-agenda-files '("~/org/work/TeachForward"))))
          ("A" "Personal and Work Week and Task List"
           ((agenda "")
            (alltodo)
            (search "* DONE")))))
#+END_SRC

[[./tf.org][Org Jira]]

*** Org Export
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (custom-set-variables
   '(org-export-backends '(ascii html icalendar latex md odt)))
#+END_SRC
*** Markdown
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package grip-mode
    :ensure-system-package (grip . "pip install grip"))
#+END_SRC

** Org Roam
#+begin_src emacs-lisp :tangle ~/.emacs
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory "~/org-roam")
    (org-roam-complete-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("p" "personal" plain
        "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :personal:\n")
        :unnarrowed t)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n I" . org-roam-node-insert-immediate)
           :map org-mode-map
           ("C-M-i" . completion-at-point))
    :config
    (org-roam-setup))


  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (push arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))
#+end_src

*** Org Roam UI
#+begin_src emacs-lisp :tangle ~/.emacs
  (use-package org-roam-ui)
#+end_src

*** Org Roam Syncing
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (defun jrm/git-auto-sync-org-roam ()
    "Automatically stages, commits, pulls, and pushes the current branch's upstream settings. Commit message is current timestamp. Depends on Magit."
    (interactive)
    (if (string-match-p (regexp-quote *org-roam-dir*) (file-name-directory buffer-file-name))
        (progn
          (magit-stage-untracked)
          (magit-stage-modified)
          (magit-run-git-with-editor "commit" "-m" (format-time-string "%a %d %b %Y %H:%M:%S %Z"))
          (magit-run-git-async "pull")
          (magit-run-git-async "push"))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook 'jrm/git-auto-sync-org-roam nil t)))
#+END_SRC

** Shells
By default just use bash for all shells
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

Make shells interactive (i.e. M-!, or source blocks in org)
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (setq shell-command-switch "-c")
#+END_SRC

*** Vterm
Make sure to unbind f9 for swtiching between frames
#+begin_src emacs-lisp :tangle (if (string-equal system-type "darwin") "~/.emacs" "")
  (use-package vterm)
  ;; for some reason, using a setq or the :config or :custom keyword in
  ;; use-package does not set the variable correctly for
  ;; vterm. Resorting to custom-set-variables.
  (custom-set-variables
   '(vterm-keymap-exceptions (push "<f9>" vterm-keymap-exceptions))
   '(vterm-keymap-exceptions (push "C-o" vterm-keymap-exceptions)))
  (define-key vterm-mode-map (kbd "C-q") #'vterm-send-next-key)
#+end_src

** Consuming Content
*** Elfeed
Many thanks to [[http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/][pragmatic emacs' post]] for guidance on this setup.
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (use-package elfeed-org
    :config (elfeed-org) (setq rmh-elfeed-org-files (list (concat *org-dir* "personal/elfeed.org"))))

  (defun jrm/elfeed-show-all ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-all"))
  (defun jrm/elfeed-show-development ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-development"))
  (defun jrm/elfeed-show-news ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-news"))
  (defun jrm/elfeed-show-emacs ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-emacs"))
  (defun jrm/elfeed-show-general ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-general"))

  (defun jrm/elfeed-load-db-and-open ()
    "Wrapper to load the elfeed db from disk before opening"
    (interactive)
    (elfeed-db-load)
    (elfeed)
    (elfeed-search-update--force))

  (defun jrm/elfeed-save-db-and-bury ()
    "Wrapper to save the elfeed db to disk before burying buffer"
    (interactive)
    (elfeed-db-save)
    (quit-window))

  (use-package elfeed
    :defer
    :bind (:map elfeed-search-mode-map
                ("A" . jrm/elfeed-show-all)
                ("E" . jrm/elfeed-show-emacs)
                ("D" . jrm/elfeed-show-development)
                ("R" . jrm/elfeed-show-general)
                ("N" . jrm/elfeed-show-news)
                ("q" . jrm/elfeed-save-db-and-bury)))

  (global-set-key (kbd "C-x e") 'jrm/elfeed-load-db-and-open)
#+END_SRC

Sometimes it's helpful to hide images for certain posts.
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (defun jrm/elfeed-show-hide-images ()
    (interactive)
    (let ((shr-inhibit-images t))
      (elfeed-show-refresh)))
  (global-set-key (kbd "C-x C-j e") 'jrm/elfeed-show-hide-images)
#+END_SRC

** Helpful Utility Functions and settings
Most of the functions in this section are bound to ~C-x C-j~ prefix key.
*** Copy Entire Buffer easily
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (defun jrm/copy-all ()
    "Copy the current buffer without loosing your place"
    (interactive)
    (let ((original-position (point)))
      (mark-whole-buffer)
      (kill-ring-save 0 0 t)
      (goto-char original-position)
      (message "Buffer contents yanked.")))
  (global-set-key (kbd "C-x C-j C-c") 'jrm/copy-all)
#+END_SRC

*** Quickly Change Font Sizes
I find myself need specific font sizes for different scenarios, i.e. projecting, screen-sharing on conference calls, etc. So, binding these to a quick way to toggle through them. 

/Note: there might be a better way to handle this but things like M-+/M-- won't zoom things like line numbers, etc./
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (defvar jrm/screens-alist '((?0 "xsmall" (lambda () (set-face-attribute 'default nil :height 70) 'default))
                              (?1 "small" (lambda () (set-face-attribute 'default nil :height 110) 'default))
                              (?2 "medium" (lambda () (set-face-attribute 'default nil :height 120) 'proj))
                              (?3 "large" (lambda () (set-face-attribute 'default nil :height 140) 'proj))
                              (?4 "xtra-large" (lambda () (set-face-attribute 'default nil :height 160) 'projLg))
                              (?5 "xxtra-large" (lambda () (set-face-attribute 'default nil :height 190) 'projLg))
                              (?6 "xxxtra-large" (lambda () (set-face-attribute 'default nil :height 210) 'projLg)))
    "List that associates number letters to descriptions and actions.")
  (defun jrm/adjust-font-size ()
    "Lets the user choose the the font size and takes the corresponding action.
  Returns whatever the action returns."
    (interactive)
    (let ((choice (read-char-choice
                   (mapconcat (lambda (item) (format "%c: %s" (car item) (cadr item)))
                              jrm/screens-alist "; ")
                   (mapcar #'car jrm/screens-alist))))
      (funcall (nth 2 (assoc choice jrm/screens-alist)))))
  (global-set-key (kbd "C-x C-j p")  'jrm/adjust-font-size)
#+END_SRC

*** Copy current file path
Lifted from (http://ergoemacs.org/emacs/emacs_copy_file_path.html)
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (defun jrm/copy-file-path (&optional *dir-path-only-p)
    "Copy the current buffer's file path or dired path to `kill-ring'.
  Result is full path."
    (interactive "P")
    (let ((-fpath
	   (if (equal major-mode 'dired-mode)
	       (expand-file-name default-directory)
	     (if (buffer-file-name)
		 (buffer-file-name)
	       (user-error "Current buffer is not associated with a file.")))))
      (kill-new
       (if *dir-path-only-p
	   (progn
	     (message "Directory path copied: 「%s」" (file-name-directory -fpath))
	     (file-name-directory -fpath))
	 (progn (message "File path copied: 「%s」" -fpath) -fpath )))))
#+END_SRC

*** Async Shell Command 
     #+begin_src emacs-lisp :tangle ~/.emacs.d/jrm-util.el
       (defun jrm/async-callback-run-callback (process signal cb)
         (interactive)
         (when (memq (process-status process) '(exit signal))
           (cb)
           (shell-command-sentinel process signal)))

       (defun jrm/async-callback (cmd cb)
         (let* ((output-buffer (generate-new-buffer "*Custom Shell Command*"))
                (proc (progn
                        (async-shell-command cmd output-buffer)
                        (get-buffer-process output-buffer))))
           (if (process-live-p proc)
               (set-process-sentinel proc cb #'jrm/async-callback-run-callback)
             (message "No process running."))))

      #+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/jrm-util.el
(defun jrm/wifi-restart-ubuntu ()
  "Restart wifi on ubuntu & derivities using network manager."
  (interactive)
  (shell-command (concat "echo " (shell-quote-argument (read-passwd "Enter Password: "))
			 " | sudo -S service network-manager restart")))
#+end_src

*** DWIM Narrow
The following narrow was lifted from Protesilaos Stavrou blog/video: https://protesilaos.com/codelog/2021-07-24-emacs-misc-custom-commands/

#+begin_src emacs-lisp :tangle ~/.emacs
  (defun prot-common-window-bounds ()
    "Determine start and end points in the window."
    (list (window-start) (window-end)))
  ;;;###autoload
  (defun prot-simple-narrow-visible-window ()
    "Narrow buffer to wisible window area.
  Also check `prot-simple-narrow-dwim'."
    (interactive)
    (let* ((bounds (prot-common-window-bounds))
           (window-area (- (cadr bounds) (car bounds)))
           (buffer-area (- (point-max) (point-min))))
      (if (/= buffer-area window-area)
          (narrow-to-region (car bounds) (cadr bounds))
        (user-error "Buffer fits in the window; won't narrow"))))
  ;;;###autoload
  (defun prot-simple-narrow-dwim ()
    "Do-what-I-mean narrowing.
  If region is active, narrow the buffer to the region's
  boundaries.
  If no region is active, narrow to the visible portion of the
  window.
  If narrowing is in effect, widen the view."
    (interactive)
    (unless mark-ring                  ; needed when entering a new buffer
      (push-mark (point) t nil))
    (cond
     ((and (use-region-p)
           (null (buffer-narrowed-p)))
      (let ((beg (region-beginning))
            (end (region-end)))
        (narrow-to-region beg end)))
     ((null (buffer-narrowed-p))
      (prot-simple-narrow-visible-window))
     (t
      (widen)
      (recenter))))
  (global-set-key (kbd "C-x n n") 'prot-simple-narrow-dwim)
#+end_src

 Disable the narrow-to-region message
 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (put 'narrow-to-region 'disabled nil)
 #+END_SRC

*** Grep customizations
For various reasons ripgrep does not work with all the projects I need so customizing grep to my liking
#+begin_src emacs-lisp :tangle ~/.emacs
(setq grep-find-ignored-directories (quote ("SCCS" "RCS" "CVS" "MCVS" ".src" ".svn" ".git" ".hg" ".bzr" "_MTN" "_darcs" "{arch}" "node_modules" "vendor" "dist" "coverage")))
#+end_src

** Final Pieces
*** Remap Key sequences
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (global-set-key (kbd "s-u") '(lambda () (interactive) (revert-buffer t (not (buffer-modified-p)) t)))
#+END_SRC

*** Last Line
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
  (provide '.emacs)
#+END_SRC



* TODOs
** TODO Automatically put jrm-variables in ~/.emacs.d
